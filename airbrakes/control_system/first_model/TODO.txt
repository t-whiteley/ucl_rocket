TODO
* improve controller to pid - maybe not necessary
* add paramter angle of attack
* lookup tables to reduce computation??
* add kalman filter

notes on my implementation
* i'm assuming constant cd in the simulation however this is only to generate data for acceleration, velocity, and displacement, my algorithm is adaptive
* model is fragile, for some reason values in memory are huge, need to look closer at why

so whats going on
* apart from the controller in the main loop, most variables in model.py are trying to simluate the data that the algorithm would receive
* data is fed into predict_apogee(), this is a file which uses 4th order runge-kutte numerical differential equation solver to predict the current apogee in real time before achieving it
* back in model.py, the difference in desired vs current (predicted) apogee is the input to a proportional controller
* the controller changes the cross sectional area of the rocket, as a mechanical airbrake would, the effects of the servo reaction are not yet implemented