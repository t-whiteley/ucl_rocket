Descrpiption of current implementation
1. filter noise using const a. kalman filter -> measure (h, a), estimate (h, v, a)
2. esimtate current apogee -> numerical differential eq solver (4th order runge-kutta)
3. control system -> difference in ap_pred and ap_des to a PID and servo signal
4. file descriptions
	* main.py is what gets executed, it is the airbrake control system loop running during flight and how the model should be run: "python3 main.py"
	* apogee.py estimates apogee given current conditions using runge-kutta
	* _model.py is a model for the sensor, it is a model that generates sensor data that feeds to:
	* _flightcomp.py is a model for the main flight computer, it takes care of sensor fusion and noise filterring to give valid data to main.py
	* _kf.py is a basic constant acceleration kalman filter for a 1d model, to be replaced (const accel approx becomes valid near apogee)


explanation of the current control system
https://drive.google.com/file/d/1SUEwMQSzJVFyoqiD_RvqsQ2awXXZ6cZL/view?usp=sharing

plan for better AHRS implementation:
https://drive.google.com/file/d/1FtFWEVXXc92_LPC655b5KEjsxmI0jamf/view?usp=sharing


TODO
- (PRIORITY) improve from 1d to 3d model -> modules for sensor fusion - kalman??
- (PRIORITY) use the rocketpy package for a better model of the rocket
- improve kinematics of model: rocket loses mass, Cd from cfd, all params
- make control system modelled to the dynamics of the system - may need cfd for cd
- optimise everywhere, CFD tables, lookup tables, algorithms
- (FUTURE) AI for self-tuning PID controller??

sources:
Application of the Kalman Filter to Rocket Apogee Detection By David W. Schultz
Barometric Apogee Detection Using the Kalman Filter By David W. Schultz
Quaternion kinematics for the error-state Kalman filter Joan Sola
https://www.youtube.com/watch?v=T9jXoG0QYIA&t=334s
